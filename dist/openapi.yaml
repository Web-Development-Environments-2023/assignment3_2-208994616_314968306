---
openapi: 3.0.3
info:
  title: Web Project API
  description: API for recipes website project
  version: 0.7.0
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
tags:
- name: Authentication
- name: Users
- name: Recipes

paths:
  /register:
    post:
      tags:
      - Authentication
      summary: Register a new user
      description: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User added to db
        "400":
          description: Username taken

  /login:
    post:
      tags:
      - Authentication
      summary: Login user operation
      description: Check if the username is in the database and the password matches
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInfo'
      responses:
        "200":
          description: User logged in
        "401":
          description: Username and/or Password are incorrect

  /logout:
    post:
      tags:
      - Authentication
      summary: Log out user
      description: Log out user
      responses:
        "200":
          description: User logged out

  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        "404":
          description: recipeId is not exists

  /recipes/showPreviewRecipe:
    post:
      tags:
      - Recipes
      summary: Show preview of recipe
      description: Show preview of recipe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  description: recipe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: recipe preview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'

  /recipes/showFullRecipe:
    post:
      tags:
      - Recipes
      summary: Show full information of recipe
      description: Show full information of recipe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  description: recipe's id which the user saved
                  example: 100
      responses:
        "200":
          description: Recipe full information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullRecipe'
                
  /recipes/random:
    get:
      tags:
      - Recipes
      summary: Get 3 random recipes
      description: Get 3 random recipes
      responses:
        '200':
          description: Get 3 random recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '404':
          description: No recipes found

  /users/addNewRecipe:
    post:
      tags:
      - Users
      summary: Add a new recipe
      description: Add a new recipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipe'
      responses:
        "200":
          description: recipe preview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'

  /users/getCreatedRecipes:
    get:
      tags:
      - Users
      summary: get user created recipes
      description: get user created recipes
      responses:
        "200":
          description: there is at least one created recipe by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "404":
          description: No recipes found
        "401":
          description: user is not authorized

  /users/addToFavorites:
    post:
      tags:
      - Users
      summary: add to favorite
      description: add to favorite
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  description: recipe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: recipe added to favorites
  
  /users/getFavorites:
    get:
      tags:
      - Users
      summary: Get user's favorite recipes
      description: Get user's favorite recipes
      responses:
        "200":
          description: favorites found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "404":
          description: No recipes found
        "401":
          description: user is not authorized

  /recipes/search/{query}/{amount}:
    post:
      tags:
      - Users
      summary: Search for recipes in spoonacular API
      description: Search for recipes in spoonacular API
      parameters:
      - name: query
        in: path
        description: Search text
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: amount
        in: path
        description: Number of results
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Filter parameters for query (cuisine/diet/intolerance)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryFilters'
        required: false
      responses:
        "200":
          description: favorites found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
          
        "404":
          description: not found

  /users/addToWatched:
    post:
      tags:
      - Users
      summary: add to favorite
      description: add to favorite
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  description: recipe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: recipe added to favorites

  /users/hreeLastWatchedRecipes:
    get:
      tags:
      - Users
      summary: Show the three last watched recipes
      description: Show the three last watched recipes
      responses:
        "200":
          description: Last watched recipes found
          content:
            application/json:
              schema:
                type: array
                items:
                $ref: '#/components/schemas/Recipe'
        "401":
          description: user is not authorized
        "404":
          description: No recipes found

components:
  schemas:
    Recipe:
      type: object
      properties:
        id:
          type: integer
          description: ID
        title:
          type: string
          description: name
          format: url
        image:
          type: string
          description: image
        CookingTime:
          type: integer
          description: cooking time
        Likes:
          type: integer
        GlutenFree:
          type: boolean
          description: is gluten free
        isVegan:
          type: boolean
          description: is vegan
        isVegetarian:
          type: boolean
          description: is vegeterian
        isCicked:
          type: boolean
          description: was clicked by the user
        isFavorite:
          type: boolean
          description: was favorited by the user
    User:
      required:
      - country
      - email
      - firstname
      - lastname
      - password
      - passwordConfirmation
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          pattern: "^[A-Za-z]"
          type: string
          description: username length of 3-8 characters
          example: User
        firstname:
          type: string
          description: first name
          example: John
        lastname:
          type: string
          description: last name
          example: Smith
        country:
          type: string
          description: country
          example: USA
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password in length of 5-10 chars at least one of them is a number and a special characters
          format: password
          example: John!Smith55
        email:
          type: string
          description: email
          format: email
          example: JohnSm55@gmail.com
      description: info for user register
    LoginInfo:
      required:
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username
          example: User
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password
          format: password
          example: John!Smith55
    FullRecipe:
      required:
      - CookingTime
      - GlutenFree
      - RecipeID
      - RecipeImg
      - RecipeName
      - ingredients
      - instructions
      - isVegan
      - isVegetarian
      - servings
      type: object
      properties:
        RecipeImg:
          type: string
          description: image
        RecipeID:
          type: integer
          description: ID
        RecipeName:
          type: string
          description: name
          format: url
        CookingTime:
          type: integer
          description: cooking time
        Likes:
          type: integer
        GlutenFree:
          type: boolean
          description: is gluten-free
        isVegan:
          type: boolean
          description: is vegan
        isVegetarian:
          type: boolean
          description: is vegeterian
        ingredients:
          type: string
          description: ingredients
        instructions:
          type: string
          description: instructions
        servings:
          type: integer
          description: servings amount
    NewRecipe:
      required:
      - CookingTime
      - GlutenFree
      - RecipeImg
      - RecipeName
      - ingredients
      - instructions
      - isVegan
      - isVegetarian
      - servings
      type: object
      properties:
        RecipeImg:
          type: string
          description: image
        RecipeName:
          type: string
          description: name
          format: url
        CookingTime:
          type: integer
          description: cooking time
        GlutenFree:
          type: boolean
          description: is gluten-free
        isVegan:
          type: boolean
          description: is vegan
        isVegetarian:
          type: boolean
          description: is vegeterian
        ingredients:
          type: string
          description: ingredients
        instructions:
          type: string
          description: instructions
        servings:
          type: integer
          description: servings amount
    QueryFilters:
      type: object
      properties:
        cuisine:
          type: array
          items:
            type: string
          description: cuisine of recipe
          example: [italian]
        diet:
          type: array
          items:
            type: string
          description: diet kind of recipe
          example: [vegetarian]
        intolerances:
          type: array
          items:
            type: string
          description: intolerance kind of recipe
          example: [Gluten]
